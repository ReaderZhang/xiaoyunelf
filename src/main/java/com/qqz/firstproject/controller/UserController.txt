package com.qqz.firstproject.controller;/*
@Author qqz
@create 2020-05-07  11:30
*/

import com.qqz.firstproject.Response.ResponseResult;
import com.qqz.firstproject.Utils.xunfeiWebAPI.RedisUtils;
import com.qqz.firstproject.dto.UserDto;
import com.qqz.firstproject.pojo.User;
import com.qqz.firstproject.service.UserService;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Set;

@RestController
public class userController {
    private String filepath;
    SimpleDateFormat sdf = new SimpleDateFormat ("yyyyMMdd");
    private final static String TPL_ID = "1437";
    private final static String TPL_VALUE = "#code#";
    private final static String KEY = "f8637f0b66264b848cbf6adc533e7ad1";
    private final static Logger LOGGER = LoggerFactory.getLogger ( userController.class );
    @Resource
    private RedisUtils redisUtils;

    @Autowired
    private UserService userService;

    @GetMapping("/login/{phone}/{password}")
    public ResponseResult login(@PathVariable("phone")String phone, @PathVariable("password")String password){
        User user1 = userService.Login1 ( phone, password );
        User user2 = userService.Login2 ( phone, password );
        if (ObjectUtils.isEmpty ( user1 )&& ObjectUtils.isEmpty ( user2 )){
            return ResponseResult.Fail ("登陆失败");
        }
        return ResponseResult.Sucess ("登陆成功");
    }
    @PutMapping("/register/{phone}")
    public ResponseResult getMessage(@PathVariable("phone")String phone, HttpSession session) throws IOException {
        //判断是否有一样的电话
        boolean flag = false;
        List<User> users;
        Set<Object> set;
        set = (redisUtils.sGet ( "number" ));
        System.out.println (set);
        if (ObjectUtils.isEmpty ( set )){
            users = userService.QueryAll ();
            for (User user:users){
                redisUtils.sSet ( "number",user.getPhone () );
                if (user.getPhone ().equals ( phone )){
                    return ResponseResult.Fail ("此手机号已注册");
                }
            }
        }
        String s = "";
        for (int i = 0;i<6;i++){
            s+=(int)(Math.random ()*10);
        }
        LOGGER.info ( phone+"========================>"+s );
        System.out.println (phone+"====================>" +s );
        OkHttpClient client = new OkHttpClient ();
        Request request = new Request.Builder ()
                .url ( " http://apis.haoservice.com/sms/sendv2?key=" + KEY + "&mobile=" + phone + "&tpl_id=" + TPL_ID + "&content=【舒心旅游责任有限公司】您的验证码为"+s+",有效时长为5分钟,不是本人请忽略&paybyvas=false"  )
                .get ().build ();
        Response response = client.newCall ( request ).execute ();
        session.setAttribute ( phone,s );
        LOGGER.info ( session.getAttribute ( phone )+"==================>"+s );
        return ResponseResult.Sucess ("验证码已发送");
    }
    @GetMapping("/register/sure/{phone}/{number}")
    public ResponseResult sure(@PathVariable("number") String number, HttpSession session, @PathVariable("phone")String phone){
        String key1 = (String) session.getAttribute ( phone );
        System.out.println (key1);
        if(key1.equals ( number )){
            session.setAttribute ( "pass","right" );
            return ResponseResult.Sucess("验证码正确");
        }
        return ResponseResult.Sucess ("验证码错误");
    }
    @PutMapping("/register/{uname}/{account}/{password}/{phone}")
    public ResponseResult register(@PathVariable("uname")String uname, @PathVariable("account")String account, @PathVariable("password")String password, @PathVariable("phone")String phone, HttpSession session){
        UserDto userdto = new UserDto ();
        userdto.setAccount ( account );
        userdto.setPassword ( password );
        userdto.setUname ( uname );
        userdto.setPhone ( phone );
        String pass = (String) session.getAttribute ( "pass" );
        System.out.println (pass);
        if (pass.equals ( "right" )){
            userService.Register ( userdto );
            return ResponseResult.Sucess ("注册成功");
        }

        return ResponseResult.Sucess ("您没有权限");
    }
    @PostMapping("/upload")
    public String uploading(@RequestParam("file") MultipartFile file, HttpSession session) {
        File targetFile = new File(filepath);
        String path = file.getOriginalFilename ().substring ( 0,file.getOriginalFilename ().indexOf ( "." ) );
        System.out.println (file.getOriginalFilename ());
        System.out.println (path);
        if (!targetFile.exists()) {
            targetFile.mkdirs();
        }

        try (FileOutputStream out = new FileOutputStream(filepath+ path+sdf.format ( new Date () )+(String.valueOf ( (int)Math.random ()*10))+".jpg");){
            session.setAttribute ( "filename",filepath+ path+sdf.format ( new Date () )+(String.valueOf ( (int)Math.random ()*10))+".jpg" );
            out.write(file.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
            return "uploading failure";
        }
        return "uploading success";
    }
    @PutMapping("/register/overall/{uname}/{account}/{password}/{phone}/{sex}/{address}")
    public ResponseResult overall(HttpSession session, @PathVariable("uname") String uname, @PathVariable("account") String account, @PathVariable("password") String password, @PathVariable("phone") String phone, @PathVariable("sex") String sex, @PathVariable("address") String address){
        User user1 = userService.Login1 ( phone, password );
        User user2 = userService.Login2 ( account, password );
        if(ObjectUtils.isEmpty ( user1 )&& ObjectUtils.isEmpty ( user2 )){
            return ResponseResult.Fail ("请先创建账号再修改信息");
        }
        User user = new User ();
        user.setAccount ( account );
        user.setUname ( uname );
        user.setPassword ( password );
        user.setPhone ( phone );
        user.setSex ( sex );
        user.setAddress ( address );
        user.setImage ( (String) session.getAttribute ( "filename" ) );
        userService.Overall ( user );
        return ResponseResult.Sucess ();
    }
}
